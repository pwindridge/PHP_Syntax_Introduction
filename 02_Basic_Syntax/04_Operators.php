<?php/** * Demonstrates declaration and use of variables and constants. * * Output is wrapped in html using the template methods *html* * and *display_html()*. * * @author Philip Windridge <p.c.windridge@staffs.ac.uk> * * @see /shared/template.php Documentation of html(), and * display_html() *//** * Include template.php to provide HTML wrapping and output */include __DIR__ . '/../shared/template.php';$bodySections = array(    getHtmlSection(        'header',        getHtmlSection('h1', 'Operators') .        getHtmlSection(            'p',            'For a full list of operators see ' .            htmlLink('http://php.net/manual/en/language.operators.php')        )    ));$mathsOperators = getTable(    array(        'caption' => 'Source: ' . htmlLink('http://uk1.php.net/manual/en/language.operators.arithmetic.php'),        'head' => array(            array('Name', 'Operator', 'Example')        ),        'body' => array(            array(                array('Addition', code('+'), code('$a + $b')),                array('Subtraction', code('-'), code('$a - $b')),                array('Multiplication', code('*'), code('$a * $b')),                array('Division', code('/'), code('$a / $b')),                array('Modulo', code('%'), code('$a % $b')),                array('Exponentiation', code('**'), code('$a ** $b'))            )        )    ));$comparisonOperators = getTable(    array(        'caption' => 'Source: ' . htmlLink('http://uk1.php.net/manual/en/language.operators.comparison.php'),        'head' => array(            array('Name', 'Operator', 'Result')        ),        'body' => array(            array(                array('Equal', code('$a == $b'), 'TRUE if $a is equal to $b after type juggling.'),                array('Identical', code('$a === $b'), 'TRUE if $a is equal to $b, and they are of the same type.'),                array('Not equal', code('$a != $b'), 'TRUE if $a is not equal to $b after type juggling.'),                array('Not equal', code('$a <> $b'), 'TRUE if $a is not equal to $b after type juggling.'),                array('Not identical', code('$a !== $b'), 'TRUE if $a is not equal to $b, or they are not of the same type.'),                array('Less than', code('$a < $b'), 'TRUE if $a is strictly less than $b.'),                array('Greater than', code('$a > $b'), 'TRUE if $a is strictly greater than $b.'),                array('Less than or equal to ', code('$a <= $b'), 'TRUE if $a is less than or equal to $b.'),                array('Greater than or equal to ', code('$a >= $b'), 'TRUE if $a is greater than or equal to $b.'),                array('Spaceship', code('$a <=> $b'), 'An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7.')            )        )    ));$assignmentOperators = getTable(    array(        'caption' => 'Source: ' . htmlLink('http://uk1.php.net/manual/en/language.operators.assignment.php'),        'head' => array(            array('Name', 'Operator', 'Example', 'Equivalent')        ),        'body' => array(            array(                array('Basic Assignment', code('='), code('$a = $b'), code('$a = $b')),                array('Combined Addition Assignment', code('+='), code('$a += $b'), code('$a = $a + $b')),                array('Combined Subtraction Assignment', code('-='), code('$a -= $b'), code('$a = $a - $b')),                array('Combined Multiplication Assignment', code('*='), code('$a *= $b'), code('$a = $b')),                array('Combined Division Assignment', code('/='), code('$a /= $b'), code('$a = $a / $b')),                array('Combined Modulus Assignment', code('%='), code('$a %= $b'), code('$a = $a % $b')),                array('Combined Concatenation Assignment', code('.='), code('$a .= $b'), code('$a = $a . $b'))            )        )    ));$booleanOperators = getTable(    array(        'caption' => 'Source: ' . htmlLink('http://php.net/manual/en/language.operators.logical.php'),        'head' => array(            array('Name', 'Example', 'Outcome')        ),        'body' => array(            array(                array('And', '$a and $b', 'TRUE if both $a and $b are TRUE.'),                array('Or', '$a or $b', 'TRUE if either $a or $b is TRUE.'),                array('Xor', '$a xor $b', 'TRUE if either $a or $b is TRUE, but not both.'),                array('Not', '! $a', 'TRUE if $a is not TRUE.'),                array('And', '$a && $b', 'TRUE if both $a and $b are TRUE.'),                array('Or', '$a || $b', 'TRUE if either $a or $b is TRUE.')            )        )    ));$bodySections[] = getHtmlSection(    'dl',    getHtmlSection('dt', 'Arithmetic Operators') .    getHtmlSection('dd', $mathsOperators) .    getHtmlSection('dt', 'Comparison Operators') .    getHtmlSection('dd', $comparisonOperators) .    getHtmlSection('dt', 'Assignment Operators') .    getHtmlSection('dd', $assignmentOperators) .    getHtmlSection('dt', 'Logical Operators') .    getHtmlSection('dd', $booleanOperators));displayHtml('Operators', $bodySections);